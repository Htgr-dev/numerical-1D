# ####### NUMERICAL SOLUTION OF 1D TRANSPORT EQUATION #######
#############################################################
#________________Define the Problem_________________________#
# Solve the equation:  Ux + b*Ut = 0, XER, t>0, with        #
# initial condition:   U(X, 0) = F(X)                       #
# boundary condition:  U(0, t) = G(t)                       #  
#############################################################
#  For simplicity we will use F(X) = G(X) = cos(X-b*t)      #
#############################################################
#                                                           #
#------------------Initial Conditions ----------------------#
#           F(X, t=0)  = cos(X-b*t) = cos(X)                #
#############################################################
#                                                           #
#------------------Boundary Conditions----------------------#
#           F(X=0, t)  = cos(X-b*t) = cos(-b*t)             #
#############################################################
#               Import python libraries                     #
#-----------------------------------------------------------#
import numpy as np 
from math import *
import matplotlib.pyplot as plt
import scipy.sparse
import scipy.sparse.linalg
%matplotlib inline



#------------------Numerical Scheme ------------------------#
# The following numerical scheme is used in the problem:    #
#  U[n][k+1] = U[n][k] + a*( (U[n+1][k+1]+U[n][k+1]) -      #
#              - (U[n+1][k] +U[n][k]))                      #
#  where a = b*lam/4,  lam = dt/dx                          #
#-----------------------------------------------------------#
#                        SOLUTION                           #
#-----------------------------------------------------------#
#       1. Specifying time and space for computation:       #
#-----------------------------------------------------------#
t = float(input("Please specify time(in sec)"))
dt = float(input("Please specify time-step(in sec)"))
h = float(input("Please specify space (in cm)"))
dh = float(input("Please specify space-step(in cm)"))

#-----------------------------------------------------------#
#   2. Defining time and space variables,and constants      #
#-----------------------------------------------------------#
N = round(t/dt)     # time steps 
K = round(h/dh)   # space nodes

lam = dt/dh           #time_unit/space_unit    
b = 1                 # velocity of the wave is 1  
a= round(b*lam/4,3)   # b*lam/4  

#-----------------------------------------------------------#
#      3. Defining initial and boundary conditions          #
#-----------------------------------------------------------#
def F_i(x):            
    return cos(x*dh)           # at the beginning, when t= 0

def F_b(n,k):
    return cos(k*dh-b*n*dt)       # when x= K, boundary

def F_exact(h, t):
    return cos(h-b*t)   # exact soultion

#-----------------------------------------------------------#
#      4. Solving the equation for the given scheme        #
#-----------------------------------------------------------#
Init = np.zeros(K-1)    #empty array for defining boundary matrix at each step
B = np.zeros((K-1))     #empty array for collecting Init values
Exact = np.zeros((K-1)) #empty array for initial b

for n in range(0,N):
    BoundN_0 = round(a*F_b(n,0),3)
    BoundN_t = round(a*F_b(n,K),3) 
    
    for k in range(1, K):
        Init[k-1] = a*F_i(k-1) + F_i(k) - a*F_i(k+1)
        
        if k==1:
            B[k-1] = Init[k-1] + BoundN_0
            
        elif k == K:
            B[k-1] = Init[k-1] + BoundN_t
            
        else:
            B[k-1] = Init[k-1]
                
#print('Final B',B)
#-----------------------------------------------------------#
diags = np.zeros((3, K-1))   # 3 diagonals
diags[0,:] = -a #np.linspace(-1, -K, K)
diags[1,:] = 1
diags[2,:] = a #np.linspace(1, K, K)
A = scipy.sparse.spdiags(diags, [-1,0,1], K-1, K-1, format='csc')
A.toarray() 
Numerical = scipy.sparse.linalg.spsolve(A, B)
#-----------------------------------------------------------#

#-----------------------------------------------------------#
#     5.  Plotting the results( with exact solution)        #
#-----------------------------------------------------------#
dist = np.arange(0, h-dh-1, dh) 
Exact = np.cos(dist - b*t)

print(N)
print(K)
print(len(Exact))
print(len(Numerical))

plt.plot(Exact, dist, label="Exact")
plt.plot(Numerical,dist, label="Numerical")
plt.xlabel('Distance, cm')
plt.ylabel('F(X)')
plt.legend()
plt.show()  
#-----------------------------------------------------------#
#     6.  Values to compare   ( with exact solution)        #
#-----------------------------------------------------------#

print('Numerical at T=',t, Numerical)
print('Exact at T=',t, Exact)
Diff_in_perc = 100*(Numerical - Exact)/Numerical
print(Diff_in_perc)
